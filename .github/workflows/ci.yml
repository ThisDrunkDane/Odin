name: CI
on: 
  release:    
    types: [published]

jobs:
  build_ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Download LLVM
        run: sudo apt-get install llvm
      - name: build odin
        run: make release
      - name: Odin run
        run: ./odin run examples/demo/demo.odin
      - name: Odin check
        run: ./odin check examples/demo/demo.odin -vet
      - if: github.event_name == 'release'
        name: Copy artifacts
        run: |
          mkdir dist
          cp odin dist
          cp -r shared dist
          cp -r core dist
          cp -r examples dist
      - if: github.event_name == 'release'
        name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ubuntu_artifacts
          path: dist
  build_macOS:
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v1
      - name: Download LLVM and setup PATH
        run: |
          brew install llvm
          echo ::add-path::/usr/local/opt/llvm/bin
          echo ::set-env name=CPATH::`xcrun --show-sdk-path`/usr/include
      - name: build odin
        run: make release
      - name: Odin run
        run: ./odin run examples/demo/demo.odin
      - name: Odin check
        run: ./odin check examples/demo/demo.odin -vet
      - if: github.event_name == 'release'
        name: Copy artifacts
        run: |
          mkdir dist
          cp odin dist
          cp -r shared dist
          cp -r core dist
          cp -r examples dist
      - if: github.event_name == 'release'
        name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: macos_artifacts
          path: dist
  build_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
      - name: Download and unpack LLVM bins
        shell: powershell
        run: |
          cd bin
          $ProgressPreference = "SilentlyContinue";
          Invoke-WebRequest -Uri https://github.com/odin-lang/Odin/releases/download/llvm-windows/llvm-binaries.zip -OutFile llvm-binaries.zip
          7z x llvm-binaries.zip > $null
      - name: build Odin
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat
          ./build.bat 1
      - name: Odin run
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat
          odin run examples/demo/demo.odin
      - name: Odin check
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat
          odin check examples/demo/demo.odin -vet
      - if: github.event_name == 'release'
        name: Copy artifacts
        run: |
          rm bin/llvm/windows/LLVM-C.lib
          mkdir dist
          cp odin.exe dist
          cp LLVM-C.dll dist
          cp -r shared dist
          cp -r core dist
          cp -r bin dist
          cp -r examples dist
      - if: github.event_name == 'release'
        name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: windows_artifacts
          path: dist
  add_release_artifacts:
    runs-on: [ubuntu-latest]
    needs: [build_windows, build_macOS, build_ubuntu]
    if: github.event_name == 'release'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
       - name: Extract tag name
         shell: bash
         run: echo "##[set-output name=tag;]$(echo ${GITHUB_REF#refs/tags/})"
         id: extract_tag
       - name: Download Windows artifacts
         uses: actions/download-artifact@v1
         with:
           name: windows_artifacts
       - name: Download Ubuntu artifacts
         uses: actions/download-artifact@v1
         with:
           name: ubuntu_artifacts
       - name: Download macOS artifacts
         uses: actions/download-artifact@v1
         with:
           name: macos_artifacts
       - name: Zip artifacts
         run: |
            filename="odin-windows-amd64-${{steps.extract_tag.outputs.tag}}.zip"
            7z a -bd "output/$filename" -r windows_artifacts/
            filename="odin-ubuntu-amd64-${{steps.extract_tag.outputs.tag}}.zip"
            7z a -bd "output/$filename" -r ubuntu_artifacts/
            filename="odin-macos-amd64-${{steps.extract_tag.outputs.tag}}.zip"
            7z a -bd "output/$filename" -r macos_artifacts/
       - name: Get release url
         id: get_release
         uses: bruceadams/get-release@v1.2.0
       - name: Upload Windows
         uses: actions/upload-release-asset@v1
         with:
           upload_url: ${{ steps.get_release.outputs.upload_url }}
           asset_path: output/odin-windows-amd64-${{steps.extract_tag.outputs.tag}}.zip
           asset_name: odin-windows-amd64-${{steps.extract_tag.outputs.tag}}.zip
           asset_content_type: application/zip
       - name: Upload Ubuntu
         uses: actions/upload-release-asset@v1
         with:
           upload_url: ${{ steps.get_release.outputs.upload_url }}
           asset_path: output/odin-ubuntu-amd64-${{steps.extract_tag.outputs.tag}}.zip
           asset_name: odin-ubuntu-amd64-${{steps.extract_tag.outputs.tag}}.zip
           asset_content_type: application/zip
       - name: Upload macOS
         uses: actions/upload-release-asset@v1
         with:
           upload_url: ${{ steps.get_release.outputs.upload_url }}
           asset_path: output/odin-macos-amd64-${{steps.extract_tag.outputs.tag}}.zip
           asset_name: odin-macos-amd64-${{steps.extract_tag.outputs.tag}}.zip
           asset_content_type: application/zip

